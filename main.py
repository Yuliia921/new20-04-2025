import os
from fastapi import FastAPI, Request, Form
from fastapi.responses import FileResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from email.message import EmailMessage
import smtplib
from uuid import uuid4
from fpdf import FPDF

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")
os.makedirs("/tmp", exist_ok=True)

def clean(text):
    if not text or text.strip() == "":
        return "-"
    try:
        text = text.replace("üå∏", "").replace("üí¨", "").replace("üì§", "")
        return text.encode("latin1", "ignore").decode("latin1")
    except:
        return "-"

@app.get("/", response_class=HTMLResponse)
async def serve_form(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/generate_pdf")
async def generate_pdf(
    request: Request,
    fio: str = Form(""),
    email: str = Form(""),
    lmp: str = Form(""),
    uterus: str = Form(""),
    gestationalSac: str = Form(""),
    crl: str = Form(""),
    term: str = Form(""),
    yolkSac: str = Form(""),
    heartbeat: str = Form(""),
    hr: str = Form(""),
    chorion: str = Form(""),
    corpusLuteum: str = Form(""),
    additional: str = Form(""),
    conclusion: str = Form(""),
    age: str = Form(""),
    diagnosis: str = Form(""),
    examination: str = Form(""),
    recommendations: str = Form(""),
):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.add_font("DejaVu", "B", "DejaVuSans-Bold.ttf", uni=True)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font("DejaVu", "B", 16)
    pdf.cell(0, 10, "–ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏—ë–º–∞", ln=True, align="C")
    pdf.ln(10)
    pdf.set_font("DejaVu", "", 12)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
    is_ultrasound = any([lmp.strip(), crl.strip(), gestationalSac.strip()])
    if is_ultrasound:
        fields = [
            ("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∫–∏", fio),
            ("–ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è", lmp),
            ("–ü–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞ –º–∞—Ç–∫–∏", uterus),
            ("–ü–ª–æ–¥–Ω–æ–µ —è–π—Ü–æ (–º–º)", gestationalSac),
            ("–ö–¢–† (–º–º)", crl),
            ("–°—Ä–æ–∫ (–Ω–µ–¥)", term),
            ("–ñ–µ–ª—Ç–æ—á–Ω—ã–π –º–µ—à–æ–∫ (–º–º)", yolkSac),
            ("–°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ", heartbeat),
            ("–ß–°–° (—É–¥/–º–∏–Ω)", hr),
            ("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ö–æ—Ä–∏–æ–Ω–∞", chorion),
            ("–ñ–µ–ª—Ç–æ–µ —Ç–µ–ª–æ", corpusLuteum),
            ("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", additional),
            ("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", conclusion),
            ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", recommendations),
        ]
    else:
        fields = [
            ("–§–ò–û", fio),
            ("–í–æ–∑—Ä–∞—Å—Ç", age),
            ("–î–∏–∞–≥–Ω–æ–∑", diagnosis),
            ("–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", examination),
            ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", recommendations),
        ]

    for label, value in fields:
        try:
            line = clean(f"{label}: {value or '-'}")
            if len(line.strip()) < 2:
                line += " ."
            pdf.multi_cell(190, 10, line)
        except:
            pdf.multi_cell(190, 10, f"{label}: -")

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    pdf.ln(10)
    pdf.set_font("DejaVu", "", 11)
    pdf.multi_cell(190, 8, "–≤—Ä–∞—á –∞–∫—É—à–µ—Ä-–≥–∏–Ω–µ–∫–æ–ª–æ–≥ –ö—É—Ä–∏–ª–µ–Ω–∫–æ –Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞")
    pdf.multi_cell(190, 8, "–¢–µ–ª–µ—Ñ–æ–Ω: +37455987715")
    pdf.multi_cell(190, 8, "Telegram: https://t.me/doc_Kurilenko")

    filename = f"/tmp/protocol_{uuid4().hex}.pdf"
    pdf.output(filename)

    try:
        smtp_user = os.getenv("SMTP_USER")
        smtp_pass = os.getenv("SMTP_PASS")

        msg = EmailMessage()
        msg["Subject"] = "–í–∞—à –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ"
        msg["From"] = smtp_user
        msg["To"] = email.strip()
        msg.set_content("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –≤–∞—à –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö—É—Ä–∏–ª–µ–Ω–∫–æ –Æ.–°.")

        with open(filename, "rb") as f:
            file_data = f.read()
            msg.add_attachment(file_data, maintype="application", subtype="pdf", filename="protocol.pdf")

        with smtplib.SMTP_SSL("smtp.yandex.ru", 465) as smtp:
            smtp.login(smtp_user, smtp_pass)
            smtp.send_message(msg)

    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {str(e)}"})

    return FileResponse(filename, media_type="application/pdf", filename="protocol.pdf")
