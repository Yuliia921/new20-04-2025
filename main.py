import os
from fastapi import FastAPI, Request, Form
from fastapi.responses import FileResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from email.message import EmailMessage
import smtplib
from uuid import uuid4
from fpdf import FPDF

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")
os.makedirs("/tmp", exist_ok=True)

def clean_value(text):
    if not text or text.strip() == "":
        return "-"
    return text.strip().replace("üå∏", "").replace("üí¨", "").replace("üì§", "")

@app.get("/", response_class=HTMLResponse)
async def serve_ultrasound(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/consultation", response_class=HTMLResponse)
async def serve_consultation(request: Request):
    return templates.TemplateResponse("consultation.html", {"request": request})

@app.post("/generate_pdf")
async def generate_pdf(
    request: Request,
    fio: str = Form(""),
    email: str = Form(""),
    lmp: str = Form(""),
    uterus: str = Form(""),
    gestationalSac: str = Form(""),
    crl: str = Form(""),
    term: str = Form(""),
    yolkSac: str = Form(""),
    heartbeat: str = Form(""),
    hr: str = Form(""),
    chorion: str = Form(""),
    corpusLuteum: str = Form(""),
    additional: str = Form(""),
    conclusion: str = Form(""),
    age: str = Form(""),
    diagnosis: str = Form(""),
    examination: str = Form(""),
    recommendations: str = Form(""),
):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=25)
    pdf.set_left_margin(15)
    pdf.set_right_margin(15)
    pdf.add_font("DejaVu", "", "fonts/DejaVuSans.ttf", uni=True)
    pdf.add_font("DejaVu", "B", "fonts/DejaVuSans-Bold.ttf", uni=True)

    is_ultrasound = any([lmp.strip(), crl.strip(), gestationalSac.strip()])

    pdf.set_font("DejaVu", "B", 16)
    title = "–£–ó–ò –º–∞–ª–æ–≥–æ —Ç–∞–∑–∞ (–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å)" if is_ultrasound else "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"
    pdf.cell(0, 10, title, ln=True, align="C")
    pdf.ln(10)
    pdf.set_font("DejaVu", "", 12)

    fields_ultrasound = [
        ("–§–ò–û", fio),
        ("–ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è", lmp),
        ("–ü–ª–æ–¥–Ω–æ–µ —è–π—Ü–æ (–º–º)", gestationalSac),
        ("–ö–¢–† (–º–º)", crl),
        ("–°—Ä–æ–∫ (–Ω–µ–¥)", term),
        ("–ñ–µ–ª—Ç–æ—á–Ω—ã–π –º–µ—à–æ–∫ (–º–º)", yolkSac),
        ("–°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ", heartbeat),
        ("–ß–°–° (—É–¥/–º–∏–Ω)", hr),
        ("–•–æ—Ä–∏–æ–Ω", chorion),
        ("–ñ–µ–ª—Ç–æ–µ —Ç–µ–ª–æ", corpusLuteum),
        ("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", additional),
        ("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", conclusion),
        ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", recommendations),
    ]

    fields_consultation = [
        ("–§–ò–û", fio),
        ("–í–æ–∑—Ä–∞—Å—Ç", age),
        ("–î–∏–∞–≥–Ω–æ–∑", diagnosis),
        ("–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", examination),
        ("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", conclusion),
        ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", recommendations),
    ]

    fields = fields_ultrasound if is_ultrasound else fields_consultation

    for label, value in fields:
        text_line = f"{label.strip()}: {clean_value(value)}"
        try:
            pdf.multi_cell(180, 10, text_line)
        except:
            pdf.multi_cell(180, 10, f"{label.strip()}: -")
        pdf.ln(1)

    pdf.ln(12)
    pdf.set_font("DejaVu", "", 9)
    pdf.cell(0, 6, "–≤—Ä–∞—á –∞–∫—É—à–µ—Ä-–≥–∏–Ω–µ–∫–æ–ª–æ–≥ –ö—É—Ä–∏–ª–µ–Ω–∫–æ –Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞", ln=True)
    pdf.cell(0, 6, "–¢–µ–ª–µ—Ñ–æ–Ω: +37455987715", ln=True)
    pdf.cell(0, 6, "Telegram: https://t.me/doc_Kurilenko", ln=True)

    filename = f"/tmp/protocol_{uuid4().hex}.pdf"
    pdf.output(filename)

    if email.strip():
        try:
            smtp_user = os.getenv("SMTP_USER")
            smtp_pass = os.getenv("SMTP_PASS")

            msg = EmailMessage()
            msg["Subject"] = "–í–∞—à –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ –î–æ–∫ –ö—É—Ä–∏–ª–µ–Ω–∫–æ"
            msg["From"] = smtp_user
            msg["To"] = email.strip()
            msg.set_content("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –≤–∞—à –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö—É—Ä–∏–ª–µ–Ω–∫–æ –Æ.–°.")

            with open(filename, "rb") as f:
                msg.add_attachment(f.read(), maintype="application", subtype="pdf", filename="protocol.pdf")

            with smtplib.SMTP_SSL("smtp.yandex.ru", 465) as smtp:
                smtp.login(smtp_user, smtp_pass)
                smtp.send_message(msg)

        except Exception as e:
            return JSONResponse(status_code=500, content={"error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {str(e)}"})

    return FileResponse(filename, media_type="application/pdf", filename="protocol.pdf")
